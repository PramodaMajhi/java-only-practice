Convert Binary to Decimal:
1010 = 1*2^3 + 0*2^2 + 1*2^1+ 0*2^0
     = 8 + 0 + 2 + 0 
     = 10
Observation
Focus only one, because remaining will turn into zero when multiply by zero
How to convert Fractional Binary to Decimal
Example:
2^3   2^2  2^1 2^0  2^-1 2^-2 2^-3  
1     1    0   0 .  1    0    1

Observation:
2^-1 = 1/2 = 0.5
2^3 = 1/8 = 0.125
Observation:
2^0 = 1
// | operator returns 1 if at least one of the operands is 1. Otherwise, it
OR 
a | 1  = 1 
a | 0  = a 

1 is more powerfull in OR , It convert to the  1. The value remain same for 0
Bits switch on
 // & operator returns 1 if and only if both the operands are 1.
AND
a & 0  = 0
a & 1 =  a 
0 is more powerful , Its convert to 0. The value remain same for 1

Bits switch off

Observation:
1) AND
    When you &1 with any number, the digit remain the same.
   i) Any AND with 0 its zero 

//^  operator returns 1 if and only if one of the operands is 1
2) XOR (^) (if and only if)
a ^ 1  = a~ (a's compliment)
a ^ 0   = a
a ^ a  = 0

The bitwise complement operator should be used carefully.
The result of ~ operator on a small number can be a big number
if the result is stored in an unsigned variable. And the result
may be a negative number if the result is stored in a signed
variable (assuming that the negative numbers are stored in 2’s
complement form where the leftmost bit is the sign bit).

The negative numbers are stored as the two’s complement of the positive counterpart.
Bitwise complement Operation of 2 (~ 0010 ): 1101

Example:
Calculate 2’s complement of 3:
Binary form of 3 = 0011
1’s Complement of 3 = 1100
Adding 1 to 1’s complement = 1100 +1
2’s complement of 3 = 1101

Note:
The bitwise Complement of 2 is same as  the binary representation of -3

// ~ It changes binary digits 1 to 0 and 0 to 1.
// It is important to note that the bitwise complement of any integer N is equal to -(N + 1).
1) For any integer n, the bitwise complement of n will be -(n+1).
2) Bitwise complement of N = ~N (represented in 2’s complement form).
3) 2’complement of ~N= -(~(~N)+1) = -(N+1).


Left Shift
a << 1 = 2a
// << operators, shifts all bits towards the left by a certain number of specified bits.
General point
a << b  = a*2^b

Right Shift
------------
Its move one bit to the Right
 general point 
 a >> b = a/2^b

 Odd or Even:
 Just check last bit , if its 1 is odd othewise even (also call least significant bit)

 Negative of a number is binary form:

 1 byte = 8 bits
 Most significant bit is first bit from left: thats tells us whether positive or negative
  1  = Negative
  0  = Positive
Remaining bits represent value of the number

Steps:
1) compliment of that no.(aka 2s complement)
2) add +1 to it


-----------------------------------------------
Solving coding 